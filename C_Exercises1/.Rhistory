points(x2,y2,pch=1)
range(y1,y2)
plot(x1,y1,type="l", ylim=(-2,2))
plot(x1,y1,type="l", ylim=[-2,2])
?plot
?ylim
[o,1]
[0,1]
[0;1]
[0:1]
(0,2)
(0;3)
n
t
plot(x1,y1,type="l", ylim=c(-2,2))
points(x2,y2,pch=1)
c.norm <- rnorm(n)
y2 <- sin(t)+c.norm#*amp # Gaussian/normal error
plot(x1,y1,type="l", ylim=c(-2,2))
points(x2,y2,pch=1)
c.norm <- rnorm(n)
amp <- 1
set.seed(1)
y1 <- sin(2*pi*x1)
y2 <- sin(t)+c.norm#*amp # Gaussian/normal error
plot(x1,y1,type="l", ylim=c(-2,2))
points(x2,y2,pch=1)
c.norm <- rnorm(n)
amp <- 1
set.seed(1)
y1 <- sin(2*pi*x1)
y2 <- sin(t)+c.norm#*amp # Gaussian/normal error
plot(x1,y1,type="l", ylim=c(-2,2))
points(x2,y2,pch=1)
### Equation: y=a*sin(b*t)+c.unif*amp
# variables
n <- 10 # number of data points
t <- seq(0,1,length.out=n)
x1 <- seq(0,1,length.out=100)
x2 <- seq(0,1,length.out=n)
c.norm <- rnorm(n)
amp <- 1
# generate data and calculate "y"
set.seed(1)
y1 <- sin(2*pi*x1)
y2 <- sin(t)+c.norm#*amp # Gaussian/normal error
# plot results
#plot(t, y1, t="l", ylim=range(y1,y2)*c(1,1.2))
#lines(t, y2, col=2)
#legend("top", legend=c("y1", "y2"), col=1:2, lty=1, ncol=2, bty="n")
plot(x1,y1,type="l", ylim=c(-2,2))
points(x2,y2,pch=1)
### Equation: y=a*sin(b*t)+c.unif*amp
# variables
n <- 10 # number of data points
t <- seq(0,1,length.out=n)
x1 <- seq(0,1,length.out=100)
x2 <- seq(0,1,length.out=n)
c.norm <- rnorm(n)
amp <- 1
# generate data and calculate "y"
set.seed(1)
y1 <- sin(2*pi*x1)
y2 <- sin(t)+c.norm#*amp # Gaussian/normal error
# plot results
#plot(t, y1, t="l", ylim=range(y1,y2)*c(1,1.2))
#lines(t, y2, col=2)
#legend("top", legend=c("y1", "y2"), col=1:2, lty=1, ncol=2, bty="n")
plot(x1,y1,type="l", ylim=c(-2,2))
points(x2,y2,pch=1)
### Equation: y=a*sin(b*t)+c.unif*amp
# variables
n <- 10 # number of data points
t <- seq(0,1,length.out=n)
x1 <- seq(0,1,length.out=100)
x2 <- seq(0,1,length.out=n)
c.norm <- rnorm(n)
amp <- 1
# generate data and calculate "y"
set.seed(1)
y1 <- sin(2*pi*x1)
y2 <- sin(t)+c.norm#*amp # Gaussian/normal error
# plot results
#plot(t, y1, t="l", ylim=range(y1,y2)*c(1,1.2))
#lines(t, y2, col=2)
#legend("top", legend=c("y1", "y2"), col=1:2, lty=1, ncol=2, bty="n")
plot(x1,y1,type="l", ylim=c(-2,2))
points(x2,y2,pch=1)
### Equation: y=a*sin(b*t)+c.unif*amp
# variables
n <- 10 # number of data points
t <- seq(0,1,length.out=n)
x1 <- seq(0,1,length.out=100)
x2 <- seq(0,1,length.out=n)
c.norm <- rnorm(n)
amp <- 1
# generate data and calculate "y"
set.seed(1)
y1 <- sin(2*pi*x1)
y2 <- sin(t)+c.norm#*amp # Gaussian/normal error
# plot results
#plot(t, y1, t="l", ylim=range(y1,y2)*c(1,1.2))
#lines(t, y2, col=2)
#legend("top", legend=c("y1", "y2"), col=1:2, lty=1, ncol=2, bty="n")
plot(x1,y1,type="l", ylim=c(-2,2))
points(x2,y2,pch=1)
### Equation: y=a*sin(b*t)+c.unif*amp
# variables
n <- 10 # number of data points
t <- seq(0,1,length.out=n)
x1 <- seq(0,1,length.out=100)
x2 <- seq(0,1,length.out=n)
c.norm <- rnorm(n)
amp <- 1
# generate data and calculate "y"
set.seed(1)
y1 <- sin(2*pi*x1)
y2 <- sin(t)+c.norm#*amp # Gaussian/normal error
# plot results
#plot(t, y1, t="l", ylim=range(y1,y2)*c(1,1.2))
#lines(t, y2, col=2)
#legend("top", legend=c("y1", "y2"), col=1:2, lty=1, ncol=2, bty="n")
plot(x1,y1,type="l", ylim=c(-2,2))
points(x2,y2,pch=1)
y2 <- sin(x1)+c.norm#*amp # Gaussian/normal error
points(x2,y2,pch=1)
points(x1,y2,pch=1)
2
2
y2 <- sin(x2)+c.norm#*amp # Gaussian/normal error
plot(x1,y1,type="l", ylim=c(-2,2))
points(x2,y2,pch=1)
n <- 10 # number of data points
t <- seq(0,1,length.out=n)
x1 <- seq(0,1,length.out=100)
x2 <- seq(0,1,length.out=n)
c.norm <- rnorm(n)
amp <- 1
set.seed(1)
y1 <- sin(2*pi*x1)
y2 <- sin(x1)+c.norm#*amp # Gaussian/normal error
y2
n <- 10 # number of data points
t <- seq(0,1,length.out=n)
x1 <- seq(0,1,length.out=100)
x2 <- seq(0,1,length.out=n)
c.norm <- rnorm(100)
amp <- 1
set.seed(1)
y1 <- sin(2*pi*x1)
y2 <- sin(x1)+c.norm#*amp # Gaussian/normal error
plot(x1,y1,type="l", ylim=c(-2,2))
points(x2,y2,pch=1)
points(x,y2,pch=1)
points(x1,y2,pch=1)
y3 <- sample(y2,n)
y3
plot(x1,y1,type="l", ylim=c(-2,2))
points(x2,y3,pch=1)
n <- 10 # number of data points
t <- seq(0,1,length.out=n)
x1 <- seq(0,1,length.out=100)
x2 <- seq(0,1,length.out=n)
c.norm <- rnorm(100)
amp <- 1
set.seed(1)
y1 <- sin(2*pi*x1)
y2 <- sin(x1)+c.norm # Gaussian/normal error
y3 <- sample(y2,n)
plot(x1,y1,type="l", ylim=c(-2,2))
points(x2,y3,pch=1)
n <- 10 # number of data points
t <- seq(0,1,length.out=n)
x1 <- seq(0,1,length.out=100)
x2 <- seq(0,1,length.out=n)
c.norm <- rnorm(100)
amp <- 1
set.seed(1)
y1 <- sin(2*pi*x1)
y2 <- sin(x1)+c.norm # Gaussian/normal error
y3 <- sample(y2,n)
plot(x1,y1,type="l", ylim=c(-2,2))
points(x2,y3,pch=1)
y3 <- sample(y2,n)
plot(x1,y1,type="l", ylim=c(-2,2))
points(x2,y3,pch=1)
y3
lines(0.25)
lines(x2,0.25)
abline(0.25)
abline(0.25,0)
plot(x1,y1,type="l", xlim=c(0,1), ylim=c(-2,2))
points(x2,y3,pch=1)
abline(0.25,0)
abline(0.25,2)
abline(0.25,-2)
plot(x1,y1,type="l", xlim=c(0,1), ylim=c(-2,2))
points(x2,y3,pch=1)
abline(0.25,0)
median(y3)
abline(median(y3),0)
y3
y3[3]
lm(y3 ~ y3[3])
lm(y3 ~ x2)
abline(0.5133,0.2579)
plot(x1,y1,type="l", xlim=c(0,1), ylim=c(-2,2))
points(x2,y3,pch=1)
abline(median(y3),0) #M = 0
regr = lm(y3 ~ x2)
summary.lm(y3)
summary.lm(y3 ~ x2)
summary(y3)
summary(lm(y3 ~ x2)
)
regr = summary(lm(y3 ~ x2)
abline(0.5133,0.2579)
regr = summary(lm(y3 ~ x2))
regr$call
regr$coefficients
regr$coefficients["(Intercept)"]
regr
regr$coefficients[1]
regr$coefficients[2]
regr = summary(lm(y3 ~ x2))
abline(regr$coefficients[1],regr$coefficients[2])
plot(x1,y1,type="l", xlim=c(0,1), ylim=c(-2,2))
points(x2,y3,pch=1)
abline(median(y3),0)
regr = summary(lm(y3 ~ x2))
abline(regr$coefficients[1],regr$coefficients[2])
abline(mean(y3),0)
abline(mode(y3),0)
abline(mean(y3,trim = 0.3),0)
abline(mean(y3,trim = 0.5),0)
plot(x1,y1,type="l", xlim=c(0,1), ylim=c(-2,2))
points(x2,y3,pch=1)
abline(mean(y3,trim = 0.2),0)
regr = summary(lm(y3 ~ x2))
abline(regr$coefficients[1],regr$coefficients[2])
abline(0,regr$coefficients[2])
plot(x1,y1,type="l", xlim=c(0,1), ylim=c(-2,2))
points(x2,y3,pch=1)
abline(median(y3),0)
regr = summary(lm(y3 ~ x2))
abline(0,regr$coefficients[2])
abline(y3[1],regr$coefficients[2])
plot(x1,y1,type="l", xlim=c(0,1), ylim=c(-2,2))
points(x2,y3,pch=1)
abline(median(y3),0)
regr = summary(lm(y3 ~ x2))
abline(y3[1],regr$coefficients[2])
abline(mean(y3),0)
y3[1]
y3[1]^2
w3 = y3[1] + y3[2]^2 + y3[3]^3
w3
?rnorm
n <- 10 # number of data points
t <- seq(0,1,length.out=n)
x1 <- seq(0,1,length.out=100)
x2 <- seq(0,1,length.out=n)
c.norm <- rnorm(100, sd = 0.3)
set.seed(1)
y1 <- sin(2*pi*x1)
y2 <- sin(x1)+c.norm # Gaussian/normal error
y3 <- sample(y2,n)
plot(x1,y1,type="l", xlim=c(0,1), ylim=c(-2,2))
points(x2,y3,pch=1)
n <- 10 # number of data points
t <- seq(0,1,length.out=n)
x1 <- seq(0,1,length.out=100)
x2 <- seq(0,1,length.out=n)
c.norm <- rnorm(100, mean = 0, sd = 0.3)
set.seed(1)
y1 <- sin(2*pi*x1)
y2 <- sin(x1)+c.norm # Gaussian/normal error
y3 <- sample(y2,n)
plot(x1,y1,type="l", xlim=c(0,1), ylim=c(-2,2))
points(x2,y3,pch=1)
c.norm <- rnorm(100, mean = 0, sd = 0.3)
y2 <- sin(x1)+c.norm # Gaussian/normal error
y3 <- sample(y2,n)
plot(x1,y1,type="l", xlim=c(0,1), ylim=c(-2,2))
points(x2,y3,pch=1)
points(x2,y2,pch=1)
points(x1,y2,pch=1)
n <- 10 # number of data points
t <- seq(0,1,length.out=n)
x1 <- seq(0,1,length.out=100)
x2 <- seq(0,1,length.out=n)
c.norm <- rnorm(100, mean = 0, sd = 0.3)
set.seed(1)
y1 <- sin(2*pi*x1)
y2 <- sin(x1)+c.norm # Gaussian/normal error
y3 <- sample(y2,n)
plot(x1,y1,type="l", xlim=c(0,1), ylim=c(-2,2))
points(x1,y2,pch=1)
n <- 10 # number of data points
t <- seq(0,1,length.out=n)
x1 <- seq(0,1,length.out=100)
x2 <- seq(0,1,length.out=n)
c.norm <- rnorm(100, mean = 0, sd = 0.3)
set.seed(1)
y1 <- sin(2*pi*x1)
y2 <- sin(x1)+c.norm # Gaussian/normal error
y3 <- sample(y2,n)
plot(x1,y1,type="l", xlim=c(0,1), ylim=c(-2,2))
points(x2,y3,pch=1)
abline(median(y3),0)
regr = summary(lm(y3 ~ x2))
abline(y3[1],regr$coefficients[2])
set.seed()
set.seed(1)
set.seed(2)
set.seed(1)
model <- lm(y3 ~ poly(x2,3))
model
model <- lm(y3 ~ poly(x2,0))
model <- lm(y3 ~ poly(x2,1))
model
model[1]
model[1,1]
model$coefficients[1]
model$coefficients[2]
model <- lm(y3 ~ poly(x2,1))
abline(model$coefficients[1],model$coefficients[2])
abline([1,3])
modelOrder <- function(M,index){
model <- lm(y3 ~ poly(x2,M))
model$coefficients[index]
}
n <- 10 # number of data points
abline(modelOrder(1,1),modelOrder(1,2))
plot(x1,y1,type="l", xlim=c(0,1), ylim=c(-2,2))
points(x2,y3,pch=1)
abline(median(y3),0)
model <- lm(y3 ~ poly(x2,1))
abline(modelOrder(1,1),modelOrder(1,2))
abline(modelOrder(3,1),modelOrder(3,2))
abline(modelOrder(9,1),modelOrder(9,2))
plot(x1,y1,type="l", xlim=c(0,1), ylim=c(-2,2))
points(x2,y3,pch=1)
abline(modelOrder(9,1),modelOrder(9,2))
modelOrder <- function(M,index){
model <- lm(y2 ~ poly(x2,M))
model$coefficients[index]
}
n <- 10 # number of data points
t <- seq(0,1,length.out=n)
abline(modelOrder(1,1),modelOrder(1,2))
modelOrder <- function(M,index){
model <- lm(y2 ~ poly(x1,M))
model$coefficients[index]
}
plot(x1,y1,type="l", xlim=c(0,1), ylim=c(-2,2))
points(x2,y3,pch=1)
abline(median(y3),0)
abline(modelOrder(1,1),modelOrder(1,2))
abline(modelOrder(9,1),modelOrder(9,2))
lm(y3 ~ poly(x2,M))
lm(y3 ~ poly(x2,3))
lm(y3 ~ poly(x2,1))
abline(modelOrder(3=,1),modelOrder(3,2),modelOrder(3,3))
x2
lm(y3 ~ poly(x2,1))
head(cars)
?cars
plot(cars$speed,cars$dist)
scatter.smooth(x=cars$speed, y=cars$dist, main="Dist ~ Speed")  # scatterplot
?cars
?iris
lm(cars$dist ~ cars$speed)
model = lm(cars$dist ~ cars$speed)
model
model$coefficients[1]
abline(model$coefficients[1],model$coefficients[2])
plot(cars$speed,cars$dist)
abline(model$coefficients[1],model$coefficients[2])
plot(cars$speed,cars$dist)
scatter.smooth(x=cars$speed, y=cars$dist, main="Dist ~ Speed")  # scatterplot
plot(cars$speed,cars$dist, main="Car Distance ~ Car Speed")
plot(cars$speed,cars$dist, main="Distance ~ Speed", xlab = "Car Speed", ylab = "Car Distance")
abline(model$coefficients[1],model$coefficients[2])
plot(cars$speed,cars$dist, main="Remweg ~ Snelheid", xlab = "Auto remweg", ylab = "Auto snelheid")
abline(model$coefficients[1],model$coefficients[2])
cars
plot(cars$speed,cars$dist, main="Remweg ~ Snelheid", xlab = "Auto snelheid", ylab = "Auto remweg")
abline(model$coefficients[1],model$coefficients[2])
?cars
plot(cars$speed,cars$dist, main="Remweg ~ Snelheid", xlab = "Auto snelheid in mijl per uur", ylab = "Auto remweg in voet")
abline(model$coefficients[1],model$coefficients[2])
plot(cars$speed,cars$dist, main="Remweg ~ Snelheid", xlab = "Auto snelheid in mijl per uur", ylab = "Auto remweg in voet")
# first load several libraries that we will use for the course Introduction to Econometrics
# note: you may have to run install.packages("  ") first as in next line
install.packages("Ecdat")
library(Ecdat)
library(car)
install.packages(car)
install.packages("car")
library(Ecdat)
library(car)
library(lmtest)
library(sandwich)
# first load several libraries that we will use for the course Introduction to Econometrics
# note: you may have to run install.packages("  ") first as in next line
install.packages("Ecdat")
install.packages("Ecdat")
# first load several libraries that we will use for the course Introduction to Econometrics
# note: you may have to run install.packages("  ") first as in next line
install.packages("Ecdat")
install.packages("car")
install.packages("lmtest")
install.packages("sandwich")
library(Ecdat)
library(car)
library(lmtest)
library(sandwich)
# package to compute certain statistics:
library(e1071)
# package to compute certain statistics:
library(e1071)
install.packages("e1071")
library(Ecdat)
library(car)
library(lmtest)
library(sandwich)
# package to compute certain statistics:
library(e1071)
getwd()
setwd("/Users/Mylene/Documents/introduction-to-econometrics/C_Exercises1/")
library(foreign)
cps08 <- read.dta("cps08.dta")
head(cps08)
attach(cps08)
# E4.1a
summary(cps08)
boxplot(ahe)
title(main = "Average Hourly Earning")
# you could compute skewness and kurtosis, but also boxplot indicates non-normality
skewness(ahe)
kurtosis(ahe)
boxplot(age)
title(main = "Age")
#1b
plot(age,ahe)
title(main = "Average Hourly earning against Age")
#1c
x=female==1
ahe.f=ahe[female==1]
ahe.m=ahe[female!=1]
t.test(ahe.f,ahe.m)
# alternatively you could use
t.test(ahe ~ x)
ahe.b=ahe[bachelor==1]
ahe.hs=ahe[bachelor==0]
t.test(ahe.b,ahe.hs)
# 1d
t.test(ahe.f,mu=17, conf.level = 0.99)
# or a more difficult option using the libraries above
confint(lm(ahe.f ~ 1), level = 0.99)
# 1e
ahe.regr=lm(ahe ~ age, data = cps08)
ahe.regr
summary(ahe.regr)
# all output (the object ahe.regr) is stored in a list
names(ahe.regr)
b.hat=ahe.regr$coefficients
b.hat
# or usong the handy function coef()
b.hat.2 = coef(ahe.regr)
# Finding R-squared
n=length(ahe)
(var(ahe)-var(resid(ahe.regr)) )/var(ahe)
var(fitted(ahe.regr))/var(ahe)
# find fitted values
ahe.fit=fitted(ahe.regr)
# or by hand using estimated coefficients!
ahe.fit.2 = b.hat[1] + age*b.hat[2]
# and check equality
(ahe.fit-ahe.fit.2)[1:5]
# or perhaps check all elements, e.g.:
sum((ahe.fit-ahe.fit.2)^2)
# 1f
b.hat
# is the slope large or small? We can increase slope by measuring age in decades (!)
sd(age)
sd(ahe)
# 1g
b.hat[1]+b.hat[2]*26
b.hat[1]+b.hat[2]*30
# 1h
# R squared
var(fitted(ahe.regr))/var(ahe)
# 1i
## compare low and high variance subsamples
lowVar <- age>=29 & age<=31	# selects only the points for which age is between 29 and 31
est2a<-lm(ahe~age,subset=lowVar)
summary(est2)
K<-length(which(lowVar==TRUE))
# see also section 7.4 internal tutorial
sample(age>31 | age<29)
lowSize <- sample(age,size=K)
est2b<-lm(ahe~age,subset=lowSize)
summary(est2b)
## plot to compare outcomes:
plot(ahe ~ age)
points(ahe ~ age,col=2,subset=lowVar)
points(ahe ~ age,col=3,subset=lowSize)
abline(ahe.regr)
abline(est2a,col=2)
abline(est2b,col=3)
