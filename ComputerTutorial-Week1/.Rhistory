amp <- 1
set.seed(1)
y1 <- sin(2*pi*x1)
y2 <- sin(t)+c.norm#*amp # Gaussian/normal error
plot(t, y1, t="l", ylim=range(y1,y2)*c(1,1.2))
plot(x1,y1,type="l", ylim=range(y1,y2))
points(x2,y2,pch=1)
range(y1,y2)
plot(x1,y1,type="l", ylim=(-2,2))
plot(x1,y1,type="l", ylim=[-2,2])
?plot
?ylim
[o,1]
[0,1]
[0;1]
[0:1]
(0,2)
(0;3)
n
t
plot(x1,y1,type="l", ylim=c(-2,2))
points(x2,y2,pch=1)
c.norm <- rnorm(n)
y2 <- sin(t)+c.norm#*amp # Gaussian/normal error
plot(x1,y1,type="l", ylim=c(-2,2))
points(x2,y2,pch=1)
c.norm <- rnorm(n)
amp <- 1
set.seed(1)
y1 <- sin(2*pi*x1)
y2 <- sin(t)+c.norm#*amp # Gaussian/normal error
plot(x1,y1,type="l", ylim=c(-2,2))
points(x2,y2,pch=1)
c.norm <- rnorm(n)
amp <- 1
set.seed(1)
y1 <- sin(2*pi*x1)
y2 <- sin(t)+c.norm#*amp # Gaussian/normal error
plot(x1,y1,type="l", ylim=c(-2,2))
points(x2,y2,pch=1)
### Equation: y=a*sin(b*t)+c.unif*amp
# variables
n <- 10 # number of data points
t <- seq(0,1,length.out=n)
x1 <- seq(0,1,length.out=100)
x2 <- seq(0,1,length.out=n)
c.norm <- rnorm(n)
amp <- 1
# generate data and calculate "y"
set.seed(1)
y1 <- sin(2*pi*x1)
y2 <- sin(t)+c.norm#*amp # Gaussian/normal error
# plot results
#plot(t, y1, t="l", ylim=range(y1,y2)*c(1,1.2))
#lines(t, y2, col=2)
#legend("top", legend=c("y1", "y2"), col=1:2, lty=1, ncol=2, bty="n")
plot(x1,y1,type="l", ylim=c(-2,2))
points(x2,y2,pch=1)
### Equation: y=a*sin(b*t)+c.unif*amp
# variables
n <- 10 # number of data points
t <- seq(0,1,length.out=n)
x1 <- seq(0,1,length.out=100)
x2 <- seq(0,1,length.out=n)
c.norm <- rnorm(n)
amp <- 1
# generate data and calculate "y"
set.seed(1)
y1 <- sin(2*pi*x1)
y2 <- sin(t)+c.norm#*amp # Gaussian/normal error
# plot results
#plot(t, y1, t="l", ylim=range(y1,y2)*c(1,1.2))
#lines(t, y2, col=2)
#legend("top", legend=c("y1", "y2"), col=1:2, lty=1, ncol=2, bty="n")
plot(x1,y1,type="l", ylim=c(-2,2))
points(x2,y2,pch=1)
### Equation: y=a*sin(b*t)+c.unif*amp
# variables
n <- 10 # number of data points
t <- seq(0,1,length.out=n)
x1 <- seq(0,1,length.out=100)
x2 <- seq(0,1,length.out=n)
c.norm <- rnorm(n)
amp <- 1
# generate data and calculate "y"
set.seed(1)
y1 <- sin(2*pi*x1)
y2 <- sin(t)+c.norm#*amp # Gaussian/normal error
# plot results
#plot(t, y1, t="l", ylim=range(y1,y2)*c(1,1.2))
#lines(t, y2, col=2)
#legend("top", legend=c("y1", "y2"), col=1:2, lty=1, ncol=2, bty="n")
plot(x1,y1,type="l", ylim=c(-2,2))
points(x2,y2,pch=1)
### Equation: y=a*sin(b*t)+c.unif*amp
# variables
n <- 10 # number of data points
t <- seq(0,1,length.out=n)
x1 <- seq(0,1,length.out=100)
x2 <- seq(0,1,length.out=n)
c.norm <- rnorm(n)
amp <- 1
# generate data and calculate "y"
set.seed(1)
y1 <- sin(2*pi*x1)
y2 <- sin(t)+c.norm#*amp # Gaussian/normal error
# plot results
#plot(t, y1, t="l", ylim=range(y1,y2)*c(1,1.2))
#lines(t, y2, col=2)
#legend("top", legend=c("y1", "y2"), col=1:2, lty=1, ncol=2, bty="n")
plot(x1,y1,type="l", ylim=c(-2,2))
points(x2,y2,pch=1)
### Equation: y=a*sin(b*t)+c.unif*amp
# variables
n <- 10 # number of data points
t <- seq(0,1,length.out=n)
x1 <- seq(0,1,length.out=100)
x2 <- seq(0,1,length.out=n)
c.norm <- rnorm(n)
amp <- 1
# generate data and calculate "y"
set.seed(1)
y1 <- sin(2*pi*x1)
y2 <- sin(t)+c.norm#*amp # Gaussian/normal error
# plot results
#plot(t, y1, t="l", ylim=range(y1,y2)*c(1,1.2))
#lines(t, y2, col=2)
#legend("top", legend=c("y1", "y2"), col=1:2, lty=1, ncol=2, bty="n")
plot(x1,y1,type="l", ylim=c(-2,2))
points(x2,y2,pch=1)
y2 <- sin(x1)+c.norm#*amp # Gaussian/normal error
points(x2,y2,pch=1)
points(x1,y2,pch=1)
2
2
y2 <- sin(x2)+c.norm#*amp # Gaussian/normal error
plot(x1,y1,type="l", ylim=c(-2,2))
points(x2,y2,pch=1)
n <- 10 # number of data points
t <- seq(0,1,length.out=n)
x1 <- seq(0,1,length.out=100)
x2 <- seq(0,1,length.out=n)
c.norm <- rnorm(n)
amp <- 1
set.seed(1)
y1 <- sin(2*pi*x1)
y2 <- sin(x1)+c.norm#*amp # Gaussian/normal error
y2
n <- 10 # number of data points
t <- seq(0,1,length.out=n)
x1 <- seq(0,1,length.out=100)
x2 <- seq(0,1,length.out=n)
c.norm <- rnorm(100)
amp <- 1
set.seed(1)
y1 <- sin(2*pi*x1)
y2 <- sin(x1)+c.norm#*amp # Gaussian/normal error
plot(x1,y1,type="l", ylim=c(-2,2))
points(x2,y2,pch=1)
points(x,y2,pch=1)
points(x1,y2,pch=1)
y3 <- sample(y2,n)
y3
plot(x1,y1,type="l", ylim=c(-2,2))
points(x2,y3,pch=1)
n <- 10 # number of data points
t <- seq(0,1,length.out=n)
x1 <- seq(0,1,length.out=100)
x2 <- seq(0,1,length.out=n)
c.norm <- rnorm(100)
amp <- 1
set.seed(1)
y1 <- sin(2*pi*x1)
y2 <- sin(x1)+c.norm # Gaussian/normal error
y3 <- sample(y2,n)
plot(x1,y1,type="l", ylim=c(-2,2))
points(x2,y3,pch=1)
n <- 10 # number of data points
t <- seq(0,1,length.out=n)
x1 <- seq(0,1,length.out=100)
x2 <- seq(0,1,length.out=n)
c.norm <- rnorm(100)
amp <- 1
set.seed(1)
y1 <- sin(2*pi*x1)
y2 <- sin(x1)+c.norm # Gaussian/normal error
y3 <- sample(y2,n)
plot(x1,y1,type="l", ylim=c(-2,2))
points(x2,y3,pch=1)
y3 <- sample(y2,n)
plot(x1,y1,type="l", ylim=c(-2,2))
points(x2,y3,pch=1)
y3
lines(0.25)
lines(x2,0.25)
abline(0.25)
abline(0.25,0)
plot(x1,y1,type="l", xlim=c(0,1), ylim=c(-2,2))
points(x2,y3,pch=1)
abline(0.25,0)
abline(0.25,2)
abline(0.25,-2)
plot(x1,y1,type="l", xlim=c(0,1), ylim=c(-2,2))
points(x2,y3,pch=1)
abline(0.25,0)
median(y3)
abline(median(y3),0)
y3
y3[3]
lm(y3 ~ y3[3])
lm(y3 ~ x2)
abline(0.5133,0.2579)
plot(x1,y1,type="l", xlim=c(0,1), ylim=c(-2,2))
points(x2,y3,pch=1)
abline(median(y3),0) #M = 0
regr = lm(y3 ~ x2)
summary.lm(y3)
summary.lm(y3 ~ x2)
summary(y3)
summary(lm(y3 ~ x2)
)
regr = summary(lm(y3 ~ x2)
abline(0.5133,0.2579)
regr = summary(lm(y3 ~ x2))
regr$call
regr$coefficients
regr$coefficients["(Intercept)"]
regr
regr$coefficients[1]
regr$coefficients[2]
regr = summary(lm(y3 ~ x2))
abline(regr$coefficients[1],regr$coefficients[2])
plot(x1,y1,type="l", xlim=c(0,1), ylim=c(-2,2))
points(x2,y3,pch=1)
abline(median(y3),0)
regr = summary(lm(y3 ~ x2))
abline(regr$coefficients[1],regr$coefficients[2])
abline(mean(y3),0)
abline(mode(y3),0)
abline(mean(y3,trim = 0.3),0)
abline(mean(y3,trim = 0.5),0)
plot(x1,y1,type="l", xlim=c(0,1), ylim=c(-2,2))
points(x2,y3,pch=1)
abline(mean(y3,trim = 0.2),0)
regr = summary(lm(y3 ~ x2))
abline(regr$coefficients[1],regr$coefficients[2])
abline(0,regr$coefficients[2])
plot(x1,y1,type="l", xlim=c(0,1), ylim=c(-2,2))
points(x2,y3,pch=1)
abline(median(y3),0)
regr = summary(lm(y3 ~ x2))
abline(0,regr$coefficients[2])
abline(y3[1],regr$coefficients[2])
plot(x1,y1,type="l", xlim=c(0,1), ylim=c(-2,2))
points(x2,y3,pch=1)
abline(median(y3),0)
regr = summary(lm(y3 ~ x2))
abline(y3[1],regr$coefficients[2])
abline(mean(y3),0)
y3[1]
y3[1]^2
w3 = y3[1] + y3[2]^2 + y3[3]^3
w3
?rnorm
n <- 10 # number of data points
t <- seq(0,1,length.out=n)
x1 <- seq(0,1,length.out=100)
x2 <- seq(0,1,length.out=n)
c.norm <- rnorm(100, sd = 0.3)
set.seed(1)
y1 <- sin(2*pi*x1)
y2 <- sin(x1)+c.norm # Gaussian/normal error
y3 <- sample(y2,n)
plot(x1,y1,type="l", xlim=c(0,1), ylim=c(-2,2))
points(x2,y3,pch=1)
n <- 10 # number of data points
t <- seq(0,1,length.out=n)
x1 <- seq(0,1,length.out=100)
x2 <- seq(0,1,length.out=n)
c.norm <- rnorm(100, mean = 0, sd = 0.3)
set.seed(1)
y1 <- sin(2*pi*x1)
y2 <- sin(x1)+c.norm # Gaussian/normal error
y3 <- sample(y2,n)
plot(x1,y1,type="l", xlim=c(0,1), ylim=c(-2,2))
points(x2,y3,pch=1)
c.norm <- rnorm(100, mean = 0, sd = 0.3)
y2 <- sin(x1)+c.norm # Gaussian/normal error
y3 <- sample(y2,n)
plot(x1,y1,type="l", xlim=c(0,1), ylim=c(-2,2))
points(x2,y3,pch=1)
points(x2,y2,pch=1)
points(x1,y2,pch=1)
n <- 10 # number of data points
t <- seq(0,1,length.out=n)
x1 <- seq(0,1,length.out=100)
x2 <- seq(0,1,length.out=n)
c.norm <- rnorm(100, mean = 0, sd = 0.3)
set.seed(1)
y1 <- sin(2*pi*x1)
y2 <- sin(x1)+c.norm # Gaussian/normal error
y3 <- sample(y2,n)
plot(x1,y1,type="l", xlim=c(0,1), ylim=c(-2,2))
points(x1,y2,pch=1)
n <- 10 # number of data points
t <- seq(0,1,length.out=n)
x1 <- seq(0,1,length.out=100)
x2 <- seq(0,1,length.out=n)
c.norm <- rnorm(100, mean = 0, sd = 0.3)
set.seed(1)
y1 <- sin(2*pi*x1)
y2 <- sin(x1)+c.norm # Gaussian/normal error
y3 <- sample(y2,n)
plot(x1,y1,type="l", xlim=c(0,1), ylim=c(-2,2))
points(x2,y3,pch=1)
abline(median(y3),0)
regr = summary(lm(y3 ~ x2))
abline(y3[1],regr$coefficients[2])
set.seed()
set.seed(1)
set.seed(2)
set.seed(1)
model <- lm(y3 ~ poly(x2,3))
model
model <- lm(y3 ~ poly(x2,0))
model <- lm(y3 ~ poly(x2,1))
model
model[1]
model[1,1]
model$coefficients[1]
model$coefficients[2]
model <- lm(y3 ~ poly(x2,1))
abline(model$coefficients[1],model$coefficients[2])
abline([1,3])
modelOrder <- function(M,index){
model <- lm(y3 ~ poly(x2,M))
model$coefficients[index]
}
n <- 10 # number of data points
abline(modelOrder(1,1),modelOrder(1,2))
plot(x1,y1,type="l", xlim=c(0,1), ylim=c(-2,2))
points(x2,y3,pch=1)
abline(median(y3),0)
model <- lm(y3 ~ poly(x2,1))
abline(modelOrder(1,1),modelOrder(1,2))
abline(modelOrder(3,1),modelOrder(3,2))
abline(modelOrder(9,1),modelOrder(9,2))
plot(x1,y1,type="l", xlim=c(0,1), ylim=c(-2,2))
points(x2,y3,pch=1)
abline(modelOrder(9,1),modelOrder(9,2))
modelOrder <- function(M,index){
model <- lm(y2 ~ poly(x2,M))
model$coefficients[index]
}
n <- 10 # number of data points
t <- seq(0,1,length.out=n)
abline(modelOrder(1,1),modelOrder(1,2))
modelOrder <- function(M,index){
model <- lm(y2 ~ poly(x1,M))
model$coefficients[index]
}
plot(x1,y1,type="l", xlim=c(0,1), ylim=c(-2,2))
points(x2,y3,pch=1)
abline(median(y3),0)
abline(modelOrder(1,1),modelOrder(1,2))
abline(modelOrder(9,1),modelOrder(9,2))
lm(y3 ~ poly(x2,M))
lm(y3 ~ poly(x2,3))
lm(y3 ~ poly(x2,1))
abline(modelOrder(3=,1),modelOrder(3,2),modelOrder(3,3))
x2
lm(y3 ~ poly(x2,1))
head(cars)
?cars
plot(cars$speed,cars$dist)
scatter.smooth(x=cars$speed, y=cars$dist, main="Dist ~ Speed")  # scatterplot
?cars
?iris
lm(cars$dist ~ cars$speed)
model = lm(cars$dist ~ cars$speed)
model
model$coefficients[1]
abline(model$coefficients[1],model$coefficients[2])
plot(cars$speed,cars$dist)
abline(model$coefficients[1],model$coefficients[2])
plot(cars$speed,cars$dist)
scatter.smooth(x=cars$speed, y=cars$dist, main="Dist ~ Speed")  # scatterplot
plot(cars$speed,cars$dist, main="Car Distance ~ Car Speed")
plot(cars$speed,cars$dist, main="Distance ~ Speed", xlab = "Car Speed", ylab = "Car Distance")
abline(model$coefficients[1],model$coefficients[2])
plot(cars$speed,cars$dist, main="Remweg ~ Snelheid", xlab = "Auto remweg", ylab = "Auto snelheid")
abline(model$coefficients[1],model$coefficients[2])
cars
plot(cars$speed,cars$dist, main="Remweg ~ Snelheid", xlab = "Auto snelheid", ylab = "Auto remweg")
abline(model$coefficients[1],model$coefficients[2])
?cars
plot(cars$speed,cars$dist, main="Remweg ~ Snelheid", xlab = "Auto snelheid in mijl per uur", ylab = "Auto remweg in voet")
abline(model$coefficients[1],model$coefficients[2])
plot(cars$speed,cars$dist, main="Remweg ~ Snelheid", xlab = "Auto snelheid in mijl per uur", ylab = "Auto remweg in voet")
getwd()
setwd(/Users/Mylene/)
setwd(Users/Mylene/)
setwd(Users/Mylene)
setwd(/Users/Mylene)
help setwd()
? setwd
list.files()
setwd(Documents)
setwd(/Documents)
getwd()
setwd(...)
setwd(dir)
setwd(/Users)
setwd(Users)
setwd("/Users/Mylene/Documents")
list.files
list.files()
setwd("/Users/Mylene/Documents/introduction-to-econometrics/ComputerTutorial-Week1/")
mtcars
View(ADVERTISE_Radio)		# show what is in Data Frame ADVERTISE_Radio
library(readxl)
ADVERTISE_Radio <- read_excel("~/Documents/introduction-to-econometrics/ComputerTutorial-Week1/ADVERTISE-Radio.xls")
View(ADVERTISE_Radio)
library(MASS)
painters
head(painters)
head(painters$School)
head(faithful)
data()
head(ChickWeight)
ls()
remove(ls)
remove(ls())
library()
installed.packages("e1071")
install.packages("e1071")
library(e1071)
duration = faithful$eruptions
waiting = faithful$waiting
kurtosis(duration)
plot(duration,waiting)
abline(lm(waiting~duration))
School = painters$School
help("painters")
skewness(duration)
mean(duration)
head(survey)
mean(survey$Height)
mean(survey$Height, na.rm = T)
mean(survey$Height, na.rm = F)
height = survey$Height
height.response = na.omit(survey$Height)
mean(height.response)
library(haven)
install.packages("haven")
library(haven)
LifeExp <- read_dta("LifeExp.dta")
library(haven)
setwd("/Users/Mylene/Documents/introduction-to-econometrics/ComputerTutorial-Week1/")
LifeExp <- read_dta("LifeExp.dta")
list.files()
LifeExp <- read_dta("LifeExp.dta")
rm(list=ls())		# remove environment: see Window 2
load("LifeExp.Rda")	# and try to reload
View(LifeExp)		# on one of our computers this failed
attach(LifeExp)		# all variables available
mean(lexp)		# it is working
lm(lexp~gnppc)		# a linear regression of lexp on gnppc
anova(lm(lexp~gnppc))	# section 11.3 internal tutorial
plot(lm(lexp~gnppc))	# most plots we do not understand (yet)
save(LifeExp,file="LifeExp.Rda")	# note: suggestion from Google
lm(lexp~gnppc)		# yes! linear regression still runs
rm(list=ls())		# clear all: see Window 2
data()	# we want to run multiple regression
View(stackloss)	# the data frame in internet tutorial
help("stackloss")	# the example in this tutorial
head(stackloss)	# the example in this tutorial
attach(stackloss)	# now we can use the variables
unrest.lm = lm(stack.loss ~ Air.Flow + Water.Temp + Acid.Conc.)
coef(unrest.lm)	# show the estimated coefficients in object unrest.lm
rest.lm = lm(stack.loss ~ Air.Flow + Water.Temp)
anova(unrest.lm, rest.lm)   # compare both (nested) models
rm(list=ls())		# remove environment: see Window 2
library(readr)
CEOSAL2 <- read_csv("~/Documents/introduction-to-econometrics/ComputerTutorial-Week1/CEOSAL2.csv")
View(CEOSAL2)
setwd("/Users/Mylene/Documents/introduction-to-econometrics/ComputerTutorial-Week1/")
rm(list=ls())		#clear memory
library(readxl)
Zocor_Stata <- read_excel("Zocor_Stata.xlsx", sheet = "Extra Sheet")
View(Zocor_Stata)
help("boxplot")		# in the tutorial they have two separate variables, but
Price=Zocor_Stata$Price	# make separate variables
State=Zocor_Stata$State
StateStr=Zocor_Stata$StateStr
boxplot(Price~State)  	 # a boxplot of Price, split in groups by State
boxplot(Price~StateStr)  # a boxplot of Price, split in groups by StateStr
t.test(Price~StateStr)	# look at output. Which t-test are we using?
t.test(Price~StateStr, var.equal=TRUE)	# Which t-test are we using?
var.test(Price~StateStr)	# what variance test are we using?
wilcox.test(Price~StateStr)	# what is the meaning of the error message?
skewness(Price)	# if R does not know skewness: remember e1071
library(e1071)	# from before, possibly first:  install.packages(?e1071?)
skewness(Price)	# that helps, but Price should be split by State
help(skewness)	# ?? does not solve our problem
Texas=(State==2)
Colorado=(State==1)
skewness(Price[Texas])		# symmetry no problem for this population
skewness(Price[Colorado])
help("t.test")	# ! we can see: 1-sample is possible
t.test(Price[Colorado],mu=125)	# you have done it!
help("prop.test")		# something to find out yourself
